from math import sin, asin, cos
from datetime import date, datetime


def jday_calc(unformatted_date, hour):
    # Value used in calculation of solar raditaion
    unformatted_date = str(unformatted_date)
    date = datetime.strptime(unformatted_date, "%Y%m%d")
    days = date.strftime("%j")

    jday1 = float(days) - 1 + (float(hour) / 24)

    return round(jday1, 2)


def solar_rad_cal(records):
    slong = -88.24556
    slat = 30.68833
    pi = 3.1419
    phi = 15 * round(slong / 15.0)

    row = len(records)
    out = []
    for counter in range(row):
        jday1 = jday_calc(records[counter][0], records[counter][12])
        hcloud = records[counter][20]
        pi = 3.1419
        eqt = 0.17 * sin(4 * pi * (int(jday1) - 80) / 373) - 0.129 * sin(2 * pi * int((jday1) - 8) / 355)
        hour1 = round(24 * (jday1 - int(jday1)))  # good
        hh = round(2 * pi / 24 * (hour1 - ((slong - phi) * 24 / 360) + eqt - 12.0), 6)
        taud = 2 * pi * (int(jday1) - 1) / 365
        val = round(0.006918 - 0.399912 * cos(taud) + 0.070257 * sin(taud) - 0.006758 * cos(2 * taud) + 0.000907 * sin(2 * taud) - 0.002697 * cos(3 * taud) + 0.00148 * sin(3 * taud), 7)
        f_sin = sin(slat * 0.01743)
        d_sin = sin(val)
        s_cos = cos(slat * 0.01743)
        d_cos = cos(val)
        h_cos = cos(hh)
        a_asin = f_sin * d_sin + s_cos * d_cos * h_cos
        ao = asin(a_asin)
        ao = ao * 180 / pi
        if ao < 0:
            phis = 0
            sro = 0
        else:
            phis = 24 * (2.044 * ao + 0.1296 * ao**2 - 1.941 * 0.001 * ao**3 + 7.591 * 0.000001 * ao**4) * 0.1314
            sro = (1 - 0.65 * (hcloud)**2) * phis
        out.append(sro)
    return out


data = [
    [19970101, 4, 64, 64, 5, 250, 0, 1, 0, 0, 0, 19970101, 0, 64, 63.75, 2, 97.5, 0, 0, 0, 0.5625, 0],
    [19970101, 14, 64, 64, 0, 0, 0, 0.75, 0, 0, 0, 19970101, 1, 64, 63.5, 4, 155, 0, 0, 0, 0.75, 0],
    [19970101, 22, 64, 64, 0, 0, 0, 0.25, 0, 0, 0, 19970101, 2, 64.25, 64, 6.5, 40, 0.0025, 0.0025, 0, 1, 0],
    [19970101, 38, 64, 63, 3, 140, 0, 0.25, 0, 0, 0, 19970101, 3, 65, 64, 3, 30, 0, 0, 0, 1, 0],
    [19970101, 100, 64, 63, 5, 130, 0, 0.75, 0, 0, 0, 19970101, 4, 64.33333588, 64, 1.666666627, 66.66666412, 0, 0, 0, 0.333333343, 0],
    [19970101, 105, 64, 64, 3, 180, 0, 0.75, 0, 0, 0, 19970101, 5, 65, 64, 0, 0, 0, 0, 0, 0, 0],
    [19970101, 200, 65, 64, 6, 40, 0.01, 1, 0, 0, 0, 19970101, 6, 64, 64, 5, 120, 0, 0, 0, 0, 0],
    [19970101, 213, 64, 64, 9, 40, 0, 1, 0, 0, 0, 19970101, 7, 64, 64, 3, 5, 0, 0, 0, 0, 0],
    [19970101, 226, 64, 64, 6, 30, 0, 1, 0, 0, 0, 19970101, 8, 64, 64, 1, 86.66666412, 0, 0, 0, 0.666666687, 65.62859542],
    [19970101, 235, 64, 64, 5, 50, 0, 1, 0, 0, 0, 19970101, 9, 65, 64, 0, 0, 0, 0, 0, 1, 83.55645447],
    [19970101, 300, 65, 64, 3, 30, 'T', 1, 0, 0, 0, 19970101, 10, 67, 64, 0, 0, 0, 0, 0, 1, 132.23116],
    [19970101, 400, 65, 64, 0, 0, 0, 1, 0, 0, 0, 19970101, 11, 69.5, 64, 1.5, 0, 0, 0, 0, 1, 166.9196976],
    [19970101, 408, 64, 64, 0, 0, 0, 0, 0, 0, 0, 19970101, 12, 71, 63, 3, 145, 0, 0, 0, 0.5, 434.6905121],
    [19970101, 424, 64, 64, 5, 200, 0, 0, 0, 0, 0, 19970101, 13, 72.5, 61.5, 3, 0, 0, 0, 0, 0.5, 417.3539963],
    [19970101, 500, 65, 64, 0, 0, 0, 0, 0, 0, 0, 19970101, 14, 73, 61, 1.5, 0, 0, 0, 0, 0.625, 311.5484219],
    [19970101, 600, 64, 64, 5, 120, 0, 0, 0, 0, 0, 19970101, 15, 74, 60, 5, 240, 0, 0, 0, 0.25, 277.6956435],
    [19970101, 700, 64, 64, 6, 10, 0, 0, 0, 0, 0, 19970101, 16, 71, 64, 8, 150, 0, 0, 0, 0.25, 135.0218572],
    [19970101, 756, 64, 64, 0, 0, 0, 0, 0, 0, 0, 19970101, 17, 68, 63, 6, 180, 0, 0, 0, 0, 16.21367836],

]


final = solar_rad_cal(data)
print(final)
print([65.62859542,
       83.55645447,
       132.23116,
       166.9196976,
       434.6905121,
       417.3539963,
       311.5484219,
       277.6956435,
       135.0218572,
       16.21367836,
       ])
